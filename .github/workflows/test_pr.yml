name: Project-dashboard PR test

on: pull_request

jobs:
  staging:
    runs-on: ubuntu-latest
    env:
      REACT_APP_FIREBASE_APP_ID_PR: ${{ secrets.REACT_APP_FIREBASE_APP_ID_PR }}
      REACT_APP_FIREBASE_AUTH_DOMAIN_PR: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN_PR }}
      REACT_APP_FIREBASE_DATABASE_PR: ${{ secrets.REACT_APP_FIREBASE_DATABASE_PR }}
      REACT_APP_FIREBASE_KEY_PR: ${{ secrets.REACT_APP_FIREBASE_KEY_PR }}
      REACT_APP_FIREBASE_MEASUREMENT_ID_PR: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID_PR }}
      REACT_APP_FIREBASE_PROJECT_ID_PR: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID_PR }}
      REACT_APP_FIREBASE_SENDER_ID_PR: ${{ secrets.REACT_APP_FIREBASE_SENDER_ID_PR }}
      REACT_APP_FIREBASE_STORAGE_BUCKET_PR: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET_PR }}
      REACT_APP_DEPLOY_ENV: pr
      CI: 1
    steps:
      - uses: actions/checkout@master
        with:
            submodules: true
      - uses: actions/setup-node@master
      - name: Install front end dependencies 
        run: npm ci
      - name: Front-end unittests
        run: npm run test -- --coverage
      - name: Eslint test
        run: ./node_modules/.bin/eslint --ext .jsx --ext .js .
      - name: Build front-end
        run: npm run build
      - name: Deploy firebase to PR env
        uses: w9jds/firebase-action@master
        with:
          args: deploy -P roster-pr --only hosting:project-dashboard-pull-request
        env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}


# Only run the coverage once
    name: get value percentage and print
    run: |
      # var REF = 'refs/pull/27/merge.json';
      REF=${{ github.ref }}
      # console.log('github.ref: ' + REF);
      echo "github.ref: $REF"
      # var PATHS = REF.split('/');
      IFS='/' read -ra PATHS <<< "$REF"
      # var COVERAGEBADGE = PATHS[1] + PATHS[2];
      COVERAGEBADGE="${PATHS[1]}_${PATHS[2]}"
      # console.log(COVERAGEBADGE); // 'pull_27'
      echo $COVERAGEBADGE
      # process.env.COVERAGEBADGE = 'pull_27';
      echo "COVERAGEBADGE=$(echo ${COVERAGEBADGE})" >> $GITHUB_ENV
      PERCENTAGE=$(npm test -- --coverage --coverageReporter='text-summary' | grep 'All files' | cut -d '|' -f 5)
      echo $PERCENTAGE
      echo "COVERAGE=$PERCENTAGE" >> $GITHUB_ENV

      name: Create the Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 97cd1718d218b973104e73446b5cdeec
        filename: project-dashboard__${{ env.COVERAGEBADGE }}.json
        label: Test PERCENTAGE
        message: ${{ env.PERCENTAGE }}
        color: green
        namedLogo: jest
        

