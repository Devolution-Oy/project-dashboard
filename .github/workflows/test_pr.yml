name: Project-dashboard PR test

on: pull_request

jobs:
  staging:
    runs-on: ubuntu-latest
    env:
      REACT_APP_FIREBASE_APP_ID_PR: ${{ secrets.REACT_APP_FIREBASE_APP_ID_PR }}
      REACT_APP_FIREBASE_AUTH_DOMAIN_PR: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN_PR }}
      REACT_APP_FIREBASE_DATABASE_PR: ${{ secrets.REACT_APP_FIREBASE_DATABASE_PR }}
      REACT_APP_FIREBASE_KEY_PR: ${{ secrets.REACT_APP_FIREBASE_KEY_PR }}
      REACT_APP_FIREBASE_MEASUREMENT_ID_PR: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID_PR }}
      REACT_APP_FIREBASE_PROJECT_ID_PR: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID_PR }}
      REACT_APP_FIREBASE_SENDER_ID_PR: ${{ secrets.REACT_APP_FIREBASE_SENDER_ID_PR }}
      REACT_APP_FIREBASE_STORAGE_BUCKET_PR: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET_PR }}
      REACT_APP_DEPLOY_ENV: pr
      CI: 1
    steps:
      - uses: actions/checkout@master
        with:
            submodules: true
      - uses: actions/setup-node@master
      - name: Install front end dependencies 
        run: npm ci
      - name: Front-end unittests
        run: npm run test -- --coverage
      - name: Eslint test
        run: ./node_modules/.bin/eslint --ext .jsx --ext .js .
      - name: Build front-end
        run: npm run build
      - name: Deploy firebase to PR env
        uses: w9jds/firebase-action@master
        with:
          args: deploy -P roster-pr --only hosting:project-dashboard-pull-request
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}



          # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build Status

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    # basically npm install but only installs from package-lock
    - run: npm ci
    - run: npm run lint
    - run: npm t

    # Only run the coverage once
    - if: ${{ matrix.node-version == '14.x' }}
      name: Get Coverage for badge
      run: |
        # var SUMMARY = [
        #   '',
        #   '=============================== Coverage summary ===============================',
        #   'Statements   : 32.5% ( 39/120 )',
        #   'Branches     : 38.89% ( 21/54 )',
        #   'Functions    : 21.74% ( 5/23 )',
        #   'Lines        : 31.93% ( 38/119 )',
        #   '================================================================================',
        #   ''
        # ];
        # SUMMARY = SUMMARY.split('\n')[5]; // 'Lines        : 31.93% ( 38/119 )'
        # SUMMARY = SUMMARY.split(':')[1].split('(')[0].trim(); // '31.93%'
        SUMMARY="$(npm test -- --coverageReporters='text-summary' | tail -2 | head -1)"
        TOKENS=($SUMMARY)
        # process.env.COVERAGE = '31.93%';
        echo "COVERAGE=$(echo ${TOKENS[2]})" >> $GITHUB_ENV

        # var REF = 'refs/pull/27/merge.json';
        REF=${{ github.ref }}
        # console.log('github.ref: ' + REF);
        echo "github.ref: $REF"
        # var PATHS = REF.split('/');
        IFS='/' read -ra PATHS <<< "$REF"
        # var BRANCH_NAME = PATHS[1] + PATHS[2];
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        # console.log(BRANCH_NAME); // 'pull_27'
        echo $BRANCH_NAME
        # process.env.BRANCH = 'pull_27';
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
    - if: ${{ matrix.node-version == '14.x' }}
      name: Create the Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 7d4c25ef2e97e8de523ef7c1fee26e8e
        filename: project-dashboard__${{ env.BRANCH }}.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}
        color: green
        namedLogo: jest
