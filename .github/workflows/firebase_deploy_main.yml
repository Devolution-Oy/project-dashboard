name: Project-dashboard deploy Main

on:
  push:
    branches: [ main ]

jobs:
  staging:
    runs-on: ubuntu-latest
    env:
      REACT_APP_FIREBASE_APP_ID_STAGING: ${{ secrets.REACT_APP_FIREBASE_APP_ID_STAGING }}
      REACT_APP_FIREBASE_AUTH_DOMAIN_STAGING: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN_STAGING }}
      REACT_APP_FIREBASE_DATABASE_STAGING: ${{ secrets.REACT_APP_FIREBASE_DATABASE_STAGING }}
      REACT_APP_FIREBASE_KEY_STAGING: ${{ secrets.REACT_APP_FIREBASE_KEY_STAGING }}
      REACT_APP_FIREBASE_MEASUREMENT_ID_STAGING: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID_STAGING }}
      REACT_APP_FIREBASE_PROJECT_ID_STAGING: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID_STAGING }}
      REACT_APP_FIREBASE_SENDER_ID_STAGING: ${{ secrets.REACT_APP_FIREBASE_SENDER_ID_STAGING }}
      REACT_APP_FIREBASE_STORAGE_BUCKET_STAGING: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET_STAGING }}
      REACT_APP_DEPLOY_ENV: staging
      CI: 1
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - uses: actions/setup-node@master
      - name: Install front end dependencies 
        run: npm ci
      - name: Front-end unittests
        run: npm run test -- --coverage
      - name: Eslint test
        run: ./node_modules/.bin/eslint --ext .jsx --ext .js .
      - name: Build front-end
        run: npm run build
      - name: Deploy firebase to staging env
        uses: w9jds/firebase-action@master
        with:
          args: deploy -P test --only hosting:project-dashboard-test
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      # Only run the coverage once
      - name: get value percentage and print
        run: |
          PERCENTAGE=$(npm test -- --coverage --coverageReporter='text-summary' | grep 'All files' | cut -d '|' -f 5)
          echo $PERCENTAGE
          echo "COVERAGE=$(echo ${PERCENTAGE})" >> $GITHUB_ENV
          echo $COVERAGE

      - name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 97cd1718d218b973104e73446b5cdeec
          filename: project-dashboard_main.json
          label: Test Coverage
          message: ${{ env.COVERAGE }}
          color: green
          namedLogo: jest  

  deploy_production:
    needs: staging
    runs-on: ubuntu-latest
    env:
      REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
      REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
      REACT_APP_FIREBASE_DATABASE: ${{ secrets.REACT_APP_FIREBASE_DATABASE }}
      REACT_APP_FIREBASE_KEY: ${{ secrets.REACT_APP_FIREBASE_KEY }}
      REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}
      REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
      REACT_APP_FIREBASE_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_SENDER_ID }}
      REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
      REACT_APP_DEPLOY_ENV: production 
      CI: 1
    steps:
    - uses: actions/checkout@master
      with:
        submodules: true
    - uses: actions/setup-node@master
    - run: npm ci 
    - run: npm run test -- --coverage
    - run: npm run build
    - name: Deploy firebase to production
      uses: w9jds/firebase-action@master
      with:
        args: deploy -P devolution-roster --only hosting:devolution-project-dashboard
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
